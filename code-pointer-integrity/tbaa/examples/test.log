; ModuleID = 'test.c'
source_filename = "test.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin17.2.0"

%struct.test_t = type { i32 (i32, i32)*, i32 (i32, i32)*, i32 (i32, i32)* }

@.str = private unnamed_addr constant [22 x i8] c"./test <num1> <num2>\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"add_rst: %d; sub_rst: %d; mult_rst: %d\0A\00", align 1

; Function Attrs: nounwind
define void @print_usage() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
define i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %test_var = alloca %struct.test_t, align 8
  %add_rst = alloca i32, align 4
  %sub_rst = alloca i32, align 4
  %mult_rst = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  call void @print_usage()
  %0 = bitcast %struct.test_t* %test_var to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* %0) #3
  %add = getelementptr inbounds %struct.test_t, %struct.test_t* %test_var, i32 0, i32 0
  store i32 (i32, i32)* @test_add, i32 (i32, i32)** %add, align 8, !tbaa !2
  %sub = getelementptr inbounds %struct.test_t, %struct.test_t* %test_var, i32 0, i32 1
  store i32 (i32, i32)* @test_sub, i32 (i32, i32)** %sub, align 8, !tbaa !2
  %mult = getelementptr inbounds %struct.test_t, %struct.test_t* %test_var, i32 0, i32 2
  store i32 (i32, i32)* @test_mult, i32 (i32, i32)** %mult, align 8, !tbaa !2
  %1 = bitcast i32* %add_rst to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %1) #3
  %2 = bitcast i32* %sub_rst to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %2) #3
  %3 = bitcast i32* %mult_rst to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %3) #3
  %add1 = getelementptr inbounds %struct.test_t, %struct.test_t* %test_var, i32 0, i32 0
  %4 = load i32 (i32, i32)*, i32 (i32, i32)** %add1, align 8, !tbaa !2
  %call = call i32 %4(i32 5, i32 6)
  store i32 %call, i32* %add_rst, align 4, !tbaa !6
  %sub2 = getelementptr inbounds %struct.test_t, %struct.test_t* %test_var, i32 0, i32 1
  %5 = load i32 (i32, i32)*, i32 (i32, i32)** %sub2, align 8, !tbaa !2
  %call3 = call i32 %5(i32 5, i32 6)
  store i32 %call3, i32* %sub_rst, align 4, !tbaa !6
  %mult4 = getelementptr inbounds %struct.test_t, %struct.test_t* %test_var, i32 0, i32 2
  %6 = load i32 (i32, i32)*, i32 (i32, i32)** %mult4, align 8, !tbaa !2
  %call5 = call i32 %6(i32 5, i32 6)
  store i32 %call5, i32* %mult_rst, align 4, !tbaa !6
  %7 = load i32, i32* %add_rst, align 4, !tbaa !6
  %8 = load i32, i32* %sub_rst, align 4, !tbaa !6
  %9 = load i32, i32* %mult_rst, align 4, !tbaa !6
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i32 0, i32 0), i32 %7, i32 %8, i32 %9)
  %10 = bitcast i32* %mult_rst to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %10) #3
  %11 = bitcast i32* %sub_rst to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %11) #3
  %12 = bitcast i32* %add_rst to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %12) #3
  %13 = bitcast %struct.test_t* %test_var to i8*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* %13) #3
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind
define internal i32 @test_add(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4, !tbaa !6
  store i32 %b, i32* %b.addr, align 4, !tbaa !6
  %0 = load i32, i32* %a.addr, align 4, !tbaa !6
  %1 = load i32, i32* %b.addr, align 4, !tbaa !6
  %add = add nsw i32 %0, %1
  ret i32 %add
}

; Function Attrs: nounwind
define internal i32 @test_sub(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4, !tbaa !6
  store i32 %b, i32* %b.addr, align 4, !tbaa !6
  %0 = load i32, i32* %a.addr, align 4, !tbaa !6
  %1 = load i32, i32* %b.addr, align 4, !tbaa !6
  %sub = sub nsw i32 %0, %1
  ret i32 %sub
}

; Function Attrs: nounwind
define internal i32 @test_mult(i32 %a, i32 %b) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4, !tbaa !6
  store i32 %b, i32* %b.addr, align 4, !tbaa !6
  %0 = load i32, i32* %a.addr, align 4, !tbaa !6
  %1 = load i32, i32* %b.addr, align 4, !tbaa !6
  %mul = mul nsw i32 %0, %1
  ret i32 %mul
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

attributes #0 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-features"="+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 5.0.0 (tags/RELEASE_500/final)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"int", !4, i64 0}
